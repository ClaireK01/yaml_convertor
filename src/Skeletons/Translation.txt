<?php

namespace App\Entity;

use App\Repository\{NAME}TranslationRepository;
use Doctrine\ORM\Mapping as ORM;
use Knp\DoctrineBehaviors\Model\SoftDeletable\SoftDeletableTrait;
use Knp\DoctrineBehaviors\Model\Timestampable\TimestampableTrait;
use Knp\DoctrineBehaviors\Model\Translatable\TranslationTrait;
use Knp\DoctrineBehaviors\Model\Sluggable\SluggableTrait;
use Knp\DoctrineBehaviors\Contract\Entity\TranslationInterface;


#[ORM\Entity(repositoryClass: {NAME}TranslationRepository::class)]
class {NAME}Translation implements TranslationInterface

{
    use TranslationTrait, SoftDeletableTrait, TimestampableTrait, SluggableTrait;

    #[ORM\Id]
    #[ORM\GeneratedValue]
    #[ORM\Column(type: 'integer')]
    private $id;

    /**
    *@ORM\Column(name="title", type="string", nullable=true)
    **/
    private $title;

    /**
    *@ORM\Column(name="shortContent", type="string", nullable=true)
    **/
    private $shortContent;

    /**
    *@ORM\Column(name="content", type="text", nullable=true)
    **/
    private $content;

    public function getId(): ?int
    {
        return $this->id;
    }

    /**
     * @return mixed
     */
    public function getTitle()
    {
        return $this->title;
    }

    /**
     * @param mixed $title
     */
    public function setTitle($title): void
    {
        $this->title = $title;
    }

    /**
     * @return mixed
     */
    public function getShortContent()
    {
        return $this->shortContent;
    }

    /**
     * @param mixed $shortContent
     */
    public function setShortContent($shortContent): void
    {
        $this->shortContent = $shortContent;
    }

    /**
     * @return mixed
     */
    public function getContent()
    {
        return $this->content;
    }

    /**
     * @param mixed $content
     */
    public function setContent($content): void
    {
        $this->content = $content;
    }


}
